import { SlashCommandBuilder } from "@discordjs/builders";
import { ApplyOptions } from "@sapphire/decorators";
import {
  ApplicationCommandRegistry,
  Command,
  CommandOptions,
} from "@sapphire/framework";
import {
  CommandInteraction,
  MessageEmbed,
  TextChannel,
} from "discord.js";

@ApplyOptions<CommandOptions>({
  description: "Creates an RP session.",
  enabled: true,
})
export default class extends Command {
  registerApplicationCommands(registry: ApplicationCommandRegistry) {
    const builder = new SlashCommandBuilder()
      .setName(this.name)
      .setDescription(this.description)
      .addStringOption((o) =>
        o
          .setName("map")
          .setDescription("The map this RP is being hosted on.")
          .setRequired(true)
      )
      .addStringOption((o) =>
        o
          .setName("host")
          .setDescription("Who's the host of this RP?")
          .setRequired(true)
      )
      .addStringOption((o) =>
        o
          .setName("host_username")
          .setDescription("What is the host's Oculus Username?")
          .setRequired(true)
      )
      .addStringOption((o) =>
        o.setName("code").setDescription("What's the code?").setRequired(true)
      )
      .addStringOption((o) =>
        o
          .setName("admin_verification")
          .setDescription(
            "The Admin that verified this RP. Don't lie, we know."
          )
          .setRequired(true)
      );

    registry.registerChatInputCommand(builder);
  }

  async chatInputRun(interaction: CommandInteraction) {
    const map = interaction.options.getString("map", true);

    const host = interaction.options.getString("host", true);

    const hostUsername = interaction.options.getString("host_username", true);

    const code = interaction.options.getString("code");

    const adminVerification = interaction.options.getString(
      "admin_verification",
      true
    );

    // reply(
    //   message,
    //   `${mapResult.content} - ${hostResult.content} - ${codeResult.content} - ${startsAtResult.content} - ${adminVerificationResult.content}`
    // );
    const embed = new MessageEmbed()
      .setAuthor({
        name: interaction.user.tag,
        iconURL: interaction.user.displayAvatarURL({ dynamic: true }),
      })
      .setTitle("New Roleplay!")
      .setDescription(`Generated by ${interaction.user}`)
      .addField("Host", `${host}`, true)
      .addField("Map", `${map}`, true)
      .addField("Code", `${code}`, true)
      .addField("Starts At", `5 Reacts`, true)
      .addField("Host's Username", `${hostUsername}`, true)
      .addField("Admin Verification", `${adminVerification}`, true)
      .setFooter({ text: `Requested by ${interaction.user.tag}` })
      .setTimestamp(Date.now());

    const rpMessage = await (
      interaction.guild?.channels.cache.get("937712506070249503") as TextChannel
    ).send({ embeds: [embed], content: "<@&895593079187316764>" });

    await rpMessage.react("<:Yes:899074935299911780>");
    await rpMessage.react("<:No:899074935014686720>");

    const embed2 = new MessageEmbed().setDescription(
      `Done! You can view it by [clicking me](https://discord.com/channels/${rpMessage.guildId}/${rpMessage.channelId}/${rpMessage.id})!`
    );

    await interaction.reply({
      embeds: [embed2],
    });
  }
}
